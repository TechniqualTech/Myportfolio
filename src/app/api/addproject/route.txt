//db connectin
import dbConnect from "@/lib/dbConnect";
import FormData from "@/model/FormData";

// Import necessary modules
import { NextResponse } from "next/server";
import path from "path";
import { writeFile } from "fs/promises";

// Define the POST handler for the file upload
export const POST = async (req, res) => {
  // Parse the incoming form data
  const formData = await req.formData();

  // Get the file from the form data
  const file = formData.get("image");
  const title = formData.get('title')
  const sub_title = formData.get('sub_title')
  const description = formData.get('description')
  const live_link = formData.get('live_link')


  // Check if a file is received
  if (!file) {
    // If no file is received, return a JSON response with an error and a 400 status code
    return NextResponse.json({ error: "No files received." }, { status: 400 });
  }

  // Convert the file data to a Buffer
  const buffer = Buffer.from(await file.arrayBuffer());

  // Replace spaces in the file name with underscores
  const filename = file.name.replaceAll(" ", "_");
  console.log(filename, title, sub_title, description, live_link);

  try {
    // Write the file to the specified directory (public/assets) with the modified filename
    await writeFile(
      path.join(process.cwd(), "public/uploads/" + filename),
      buffer
    );

    // Generate the file URL
    const imageUrl = `/uploads/${filename}`;

    // Connect to the database
    await dbConnect();

    // Insert data into MongoDB
    const formDataEntry = new FormData({
      title,
      sub_title,
      description,
      live_link,
      imageUrl,
    });

    await formDataEntry.save();


    // Return a JSON response with a success message and a 201 status code
    return NextResponse.json({ Message: "Success", status: 201 });
  } catch (error) {
    // If an error occurs during file writing, log the error and return a JSON response with a failure message and a 500 status code
    console.log("Error occurred ", error);
    return NextResponse.json({ Message: "Failed", status: 500 });
  }
};